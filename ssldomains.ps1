function Get-SSLCertificateInfo {
    param(
        [string]$domain,
        [System.Text.StringBuilder]$reportBuilder
    )

    try {
        $request = [System.Net.HttpWebRequest]::Create("https://$domain")
        $request.Method = "GET"
        $request.Timeout = 5000
        $request.AllowAutoRedirect = $false
        $response = $request.GetResponse()
        $response.Close()

        $certificate = $request.ServicePoint.Certificate
        $cert2 = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 $certificate

        $expiryDate = $cert2.NotAfter
        $now = Get-Date
        $daysLeft = ($expiryDate - $now).Days

        $status = if ($daysLeft -lt 30) { "‚ö†Ô∏è –°–ö–û–†–û –ò–°–¢–ï–ö–ê–ï–¢!" } else { "‚úÖ OK" }

        $reportBuilder.AppendLine("–î–æ–º–µ–Ω: $domain") | Out-Null
        $reportBuilder.AppendLine("–ò—Å—Ç–µ–∫–∞–µ—Ç: $($expiryDate.ToString("dd.MM.yyyy HH:mm"))") | Out-Null
        $reportBuilder.AppendLine("–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: $daysLeft") | Out-Null
        $reportBuilder.AppendLine("–°—Ç–∞—Ç—É—Å: $status") | Out-Null
        $reportBuilder.AppendLine("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: $((Get-Date).ToString("dd.MM.yyyy HH:mm"))") | Out-Null
        $reportBuilder.AppendLine("".PadRight(50, "-")) | Out-Null
    }
    catch {
        $reportBuilder.AppendLine("–î–æ–º–µ–Ω: $domain") | Out-Null
        $reportBuilder.AppendLine("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: $_") | Out-Null
        $reportBuilder.AppendLine("".PadRight(50, "-")) | Out-Null
    }
}

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ ===
$domainList = Get-Content -Path ".\domains.txt"
$report = New-Object System.Text.StringBuilder

$report.AppendLine("== –û–¢–ß–Å–¢ –ü–û SSL-–°–ï–†–¢–ò–§–ò–ö–ê–¢–ê–ú ==") | Out-Null
$report.AppendLine("–î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: $(Get-Date -Format 'dd.MM.yyyy HH:mm')") | Out-Null
$report.AppendLine("".PadRight(50, "=")) | Out-Null

foreach ($domain in $domainList) {
    if (-not [string]::IsNullOrWhiteSpace($domain)) {
        Get-SSLCertificateInfo -domain $domain.Trim() -reportBuilder $report
    }
}

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ .txt ===
$txtPath = ".\ssl_report.txt"
$report.ToString() | Out-File -FilePath $txtPath -Encoding UTF8

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SMTP (STARTTLS) ===

# SMTP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
$smtpServer = "—Å–µ—Ä–≤–µ—Ä"
$smtpPort = –ø–æ—Ä—Ç
$from = "–ø–æ—á—Ç–∞"
$to = "s–ø–æ—á—Ç–∞"
$subject = "SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç"
$body = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º."

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
$securePassword = ConvertTo-SecureString "–ü–ê–†–û–õ–¨" -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential($from, $securePassword)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ STARTTLS (–ø–æ—Ä—Ç 587)
Send-MailMessage -From $from `
                 -To $to `
                 -Subject $subject `
                 -Body $body `
                 -SmtpServer $smtpServer `
                 -Port $smtpPort `
                 -Credential $credentials `
                 -Attachments $txtPath `
                 -DeliveryNotificationOption OnFailure `
                 -Encoding UTF8

Write-Host "`nüì¨ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å $from –Ω–∞ $to —á–µ—Ä–µ–∑ STARTTLS (${smtpServer}:$smtpPort)"
